# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}

Equal Area Cylindrical CRS with latitude of true scale `latâ‚œâ‚›` and longitude origin `lonâ‚€`
in degrees and a given `Datum`.
"""
struct EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum,M<:Met} <: Projected{Datum}
  x::M
  y::M
  EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(x::M, y::M) where {latâ‚œâ‚›,lonâ‚€,Datum,M<:Met} =
    new{latâ‚œâ‚›,lonâ‚€,Datum,float(M)}(x, y)
end

EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(x::Met, y::Met) where {latâ‚œâ‚›,lonâ‚€,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(promote(x, y)...)
EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(x::Len, y::Len) where {latâ‚œâ‚›,lonâ‚€,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(uconvert(u"m", x), uconvert(u"m", y))
EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(x::Number, y::Number) where {latâ‚œâ‚›,lonâ‚€,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}(addunit(x, u"m"), addunit(y, u"m"))

EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€}(args...) where {latâ‚œâ‚›,lonâ‚€} = EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,WGS84Latest}(args...)

"""
    Lambert(x, y)
    Lambert{Datum}(x, y)

Lambert cylindrical equal-area coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
Lambert(1, 1) # add default units
Lambert(1u"m", 1u"m") # integers are converted converted to floats
Lambert(1.0u"km", 1.0u"km") # length quantities are converted to meters
Lambert(1.0u"m", 1.0u"m")
Lambert{WGS84Latest}(1.0u"m", 1.0u"m")
```

See [ESRI:54034](https://epsg.io/54034).
"""
const Lambert{Datum} = EqualAreaCylindrical{0.0u"Â°",0.0u"Â°",Datum}

"""
    Behrmann(x, y)
    Behrmann{Datum}(x, y)

Behrmann coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
Behrmann(1, 1) # add default units
Behrmann(1u"m", 1u"m") # integers are converted converted to floats
Behrmann(1.0u"km", 1.0u"km") # length quantities are converted to meters
Behrmann(1.0u"m", 1.0u"m")
Behrmann{WGS84Latest}(1.0u"m", 1.0u"m")
```

See [ESRI:54017](https://epsg.io/54017).
"""
const Behrmann{Datum} = EqualAreaCylindrical{30.0u"Â°",0.0u"Â°",Datum}

"""
    GallPeters(x, y)
    GallPeters{Datum}(x, y)

Gall-Peters coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
GallPeters(1, 1) # add default units
GallPeters(1u"m", 1u"m") # integers are converted converted to floats
GallPeters(1.0u"km", 1.0u"km") # length quantities are converted to meters
GallPeters(1.0u"m", 1.0u"m")
GallPeters{WGS84Latest}(1.0u"m", 1.0u"m")
```
"""
const GallPeters{Datum} = EqualAreaCylindrical{45.0u"Â°",0.0u"Â°",Datum}

# ------------
# CONVERSIONS
# ------------

# Adapted from PROJ coordinate transformation software
# Initial PROJ 4.3 public domain code was put as Frank Warmerdam as copyright
# holder, but he didn't mean to imply he did the work. Essentially all work was
# done by Gerald Evenden.

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/projections/cea.cpp
# reference formula: https://neacsu.net/docs/geodesy/snyder/3-cylindrical/sect_10/

function formulas(::Type{<:EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}}, ::Type{T}) where {latâ‚œâ‚›,lonâ‚€,Datum,T}
  ðŸŒŽ = ellipsoid(Datum)
  e = T(eccentricity(ðŸŒŽ))
  eÂ² = T(eccentricityÂ²(ðŸŒŽ))
  Î»â‚€ = T(ustrip(deg2rad(lonâ‚€)))
  Ï•â‚œâ‚› = T(ustrip(deg2rad(latâ‚œâ‚›)))

  kâ‚€ = cos(Ï•â‚œâ‚›) / sqrt(1 - eÂ² * sin(Ï•â‚œâ‚›)^2)

  fx(Î», Ï•) = kâ‚€ * (Î» - Î»â‚€)

  function fy(Î», Ï•)
    sinÏ• = sin(Ï•)
    esinÏ• = e * sinÏ•
    q = (1 - eÂ²) * (sinÏ• / (1 - esinÏ•^2) - (1 / 2e) * log((1 - esinÏ•) / (1 + esinÏ•)))
    q / 2kâ‚€
  end

  fx, fy
end

function Base.convert(::Type{LatLon{Datum}}, coords::EqualAreaCylindrical{latâ‚œâ‚›,lonâ‚€,Datum}) where {latâ‚œâ‚›,lonâ‚€,Datum}
  ðŸŒŽ = ellipsoid(Datum)
  x = coords.x
  y = coords.y
  a = oftype(x, majoraxis(ðŸŒŽ))
  e = convert(numtype(x), eccentricity(ðŸŒŽ))
  eÂ² = convert(numtype(x), eccentricityÂ²(ðŸŒŽ))
  Î»â‚€ = numconvert(numtype(x), deg2rad(lonâ‚€))
  Ï•â‚œâ‚› = numconvert(numtype(x), deg2rad(latâ‚œâ‚›))

  omeÂ² = 1 - eÂ²
  kâ‚€ = cos(Ï•â‚œâ‚›) / sqrt(1 - eÂ² * sin(Ï•â‚œâ‚›)^2)
  # same formula as q, but Ï• = 90Â°
  qâ‚š = omeÂ² * (1 / omeÂ² - (1 / 2e) * log((1 - e) / (1 + e)))

  Î» = Î»â‚€ + x / (a * kâ‚€)
  q = 2y * kâ‚€ / a
  Î² = asin(q / qâ‚š)
  Ï• = auth2geod(Î², eÂ²)

  LatLon{Datum}(rad2deg(Ï•) * u"Â°", rad2deg(Î») * u"Â°")
end
